.PHONY: clean coverage diff_cover docs \
	quality requirements selfcheck test test-all upgrade validate

.DEFAULT_GOAL := help

PYTHON_FILES = ./code_annotations/ setup.py tests/ test_utils/

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	coverage erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

coverage: clean ## generate and view HTML coverage report
	pytest --cov-report html
	$(BROWSER) htmlcov/index.html

docs: ## generate Sphinx HTML documentation, including API docs
	tox -e docs
	$(BROWSER) docs/_build/html/index.html

COMMON_CONSTRAINTS_TXT=requirements/common_constraints.txt
.PHONY: $(COMMON_CONSTRAINTS_TXT)
$(COMMON_CONSTRAINTS_TXT):
	wget -O "$(@)" https://raw.githubusercontent.com/edx/edx-lint/master/edx_lint/files/common_constraints.txt || touch "$(@)"

compile-requirements: export CUSTOM_COMPILE_COMMAND=make upgrade
compile-requirements: $(COMMON_CONSTRAINTS_TXT) ## Re-compile *.in requirements to *.txt
	pip install -qr requirements/pip-tools.txt
	# Make sure to compile files after any other files they include!
	pip-compile ${COMPILE_OPTS} --allow-unsafe requirements/pip.in
	pip-compile ${COMPILE_OPTS} requirements/pip-tools.in
	pip install -qr requirements/pip.txt
	pip install -qr requirements/pip-tools.txt
	pip-compile ${COMPILE_OPTS} requirements/base.in
	pip-compile ${COMPILE_OPTS} requirements/django.in
	pip-compile ${COMPILE_OPTS} requirements/test.in
	pip-compile ${COMPILE_OPTS} requirements/doc.in
	pip-compile ${COMPILE_OPTS} requirements/quality.in
	pip-compile ${COMPILE_OPTS} requirements/ci.in
	pip-compile ${COMPILE_OPTS} requirements/dev.in
	# Let tox control the Django version for tests
	sed '/^[dD]jango==/d' requirements/test.txt > requirements/test.tmp
	mv requirements/test.tmp requirements/test.txt

upgrade: $(COMMON_CONSTRAINTS_TXT) ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	$(MAKE) compile-requirements COMPILE_OPTS="--upgrade"

quality: ## check coding style with pycodestyle and pylint
	tox -e quality

requirements: ## install development environment requirements
	pip install -qr requirements/pip.txt
	pip install -qr requirements/pip-tools.txt
	pip-sync requirements/dev.txt requirements/test.txt requirements/private.*
	pip install -e .

test: clean test-unit  test-quality ## run tests in the current virtualenv

test-unit:  ## run unit tests
	pytest

test-quality: test-lint test-types test-codestyle test-docstyle test-isort selfcheck  ## run all quality tests

test-codestyle:  ## run pycodestyle tests
	pycodestyle ${PYTHON_FILES}

test-docstyle: ## run pydocstyle tests
	pydocstyle ${PYTHON_FILES}

test-isort: ## run isort tests
	isort --check-only --diff ${PYTHON_FILES}

test-lint: ## run pylint tests
	pylint ${PYTHON_FILES}

test-types: ## run mypy tests on the whole codebase
	mypy --ignore-missing-imports --strict ${PYTHON_FILES}

diff_cover: test ## find diff lines that need test coverage
	diff-cover coverage.xml

test-all: ## run tests on every supported Python
	tox -e quality
	tox

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."
